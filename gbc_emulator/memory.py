from enum import Enum

class GuiMemory:
    """Provides read only access to the GUI. Reading the memory from the GUI
    should not effect the memories last_addr property. This property is used
    by the gui to determine the immediate memory address for rendering."""
    def __init__(self, memory):
        self.memory = memory

    def __setitem__(self, index, value):
        pass

    def __getitem__(self, index):
        return self.memory.__getitem__(index, from_gui=True)

    @property
    def last_addr(self):
        return self.memory.last_addr

class Memory:
    BOOTLOADER = (
        0x31, 0xfe, 0xff, 0xaf, 0x21, 0xff, 0x9f, 0x32, 0xcb, 0x7c, 0x20, 0xfb, 0x21, 0x26, 0xff, 0x0e,
        0x11, 0x3e, 0x80, 0x32, 0xe2, 0x0c, 0x3e, 0xf3, 0xe2, 0x32, 0x3e, 0x77, 0x77, 0x3e, 0xfc, 0xe0,
        0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1a, 0xcd, 0x95, 0x00, 0xcd, 0x96, 0x00, 0x13, 0x7b,
        0xfe, 0x34, 0x20, 0xf3, 0x11, 0xd8, 0x00, 0x06, 0x08, 0x1a, 0x13, 0x22, 0x23, 0x05, 0x20, 0xf9,
        0x3e, 0x19, 0xea, 0x10, 0x99, 0x21, 0x2f, 0x99, 0x0e, 0x0c, 0x3d, 0x28, 0x08, 0x32, 0x0d, 0x20,
        0xf9, 0x2e, 0x0f, 0x18, 0xf3, 0x67, 0x3e, 0x64, 0x57, 0xe0, 0x42, 0x3e, 0x91, 0xe0, 0x40, 0x04,
        0x1e, 0x02, 0x0e, 0x0c, 0xf0, 0x44, 0xfe, 0x90, 0x20, 0xfa, 0x0d, 0x20, 0xf7, 0x1d, 0x20, 0xf2,
        0x0e, 0x13, 0x24, 0x7c, 0x1e, 0x83, 0xfe, 0x62, 0x28, 0x06, 0x1e, 0xc1, 0xfe, 0x64, 0x20, 0x06,
        0x7b, 0xe2, 0x0c, 0x3e, 0x87, 0xe2, 0xf0, 0x42, 0x90, 0xe0, 0x42, 0x15, 0x20, 0xd2, 0x05, 0x20,
        0x4f, 0x16, 0x20, 0x18, 0xcb, 0x4f, 0x06, 0x04, 0xc5, 0xcb, 0x11, 0x17, 0xc1, 0xcb, 0x11, 0x17,
        0x05, 0x20, 0xf5, 0x22, 0x23, 0x22, 0x23, 0xc9, 0xce, 0xed, 0x66, 0x66, 0xcc, 0x0d, 0x00, 0x0b,
        0x03, 0x73, 0x00, 0x83, 0x00, 0x0c, 0x00, 0x0d, 0x00, 0x08, 0x11, 0x1f, 0x88, 0x89, 0x00, 0x0e,
        0xdc, 0xcc, 0x6e, 0xe6, 0xdd, 0xdd, 0xd9, 0x99, 0xbb, 0xbb, 0x67, 0x63, 0x6e, 0x0e, 0xec, 0xcc,
        0xdd, 0xdc, 0x99, 0x9f, 0xbb, 0xb9, 0x33, 0x3e, 0x3c, 0x42, 0xb9, 0xa5, 0xb9, 0xa5, 0x42, 0x3c,
        0x21, 0x04, 0x01, 0x11, 0xa8, 0x00, 0x1a, 0x13, 0xbe, 0x20, 0xfe, 0x23, 0x7d, 0xfe, 0x34, 0x20,
        0xf5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xfb, 0x86, 0x20, 0xfe, 0x3e, 0x01, 0xe0, 0x50,
    )

    # Register Map
    # https://youtu.be/HyzD8pNlpwI?t=1320
    # Interrupt Controller
    REGISTER_IF = 0xFF0F # Interrupt Flag
    REGISTER_IE = 0xFFFF # Interrupt Enable

    # Bootloader
    REGISTER_BOOTLOADER_DISABLED = 0xFF50

    # Joypad Input
    REGISTER_P1 = 0xFF00 # Joypad

    # Timer
    REGISTER_DIV = 0xFF04 # Divider Register
    REGISTER_TIMA = 0xFF05 # Timer Counter
    REGISTER_TMA = 0xFF06 # Timer Modulo
    REGISTER_TAC = 0xFF07 # Timer Control

    # Pixel Processing Unit
    REGISTER_LCDC = 0xFF40 # LCD Control
    REGISTER_STAT = 0xFF41 # LCDC Status
    REGISTER_SCY = 0xFF42 # Scroll Y
    REGISTER_SCX = 0xFF43 # Scroll X
    REGISTER_LY = 0xFF44 # LCDC Y-Coordinate
    REGISTER_LYC = 0xFF45 # LY Compare
    REGISTER_DMA = 0xFF46 # DMA Transfer and Start Address
    REGISTER_BGP = 0xFF47 # BG Palette Data
    REGISTER_OBP0 = 0xFF48 # Object Palette 0 Data
    REGISTER_OBP1 = 0xFF49 # Object Palette 1 Data
    REGISTER_WY = 0xFF4A # Window Y Position
    REGISTER_WX = 0xFF4B # Window X Postion minus 7

    # TODO: Serial Data Transfer

    # TODO: Sound Controller

    def __init__(self):
        self.physical_memory = memory = [0] * 2**16
        self.verbose = False

        # Last addr is used to mark the immediate value for rendering on the
        # GUI.
        self.last_addr = 0

        self.gui_memory = GuiMemory(self)

    def __setitem__(self, index, value):
        self.last_addr = index

        if index == 0xFF02:
            if value == 0x81:
                print(str(chr(self.physical_memory[0xFF01])), end = '')
        else:
            if self.verbose:
                print("memory[{}] = {} ({})".format(hex(index), hex(value), str(chr(value))))
            self.physical_memory[index] = value

    def __getitem__(self, index, from_gui=False):
        if not from_gui:
            # GUI should not mess with last_addr
            self.last_addr = index

        if index <= 0xFF and self[Memory.REGISTER_BOOTLOADER_DISABLED]:
            return Memory.BOOTLOADER[index]
        else:
            return self.physical_memory[index]
